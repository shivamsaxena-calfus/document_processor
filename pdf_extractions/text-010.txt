4

A First Example

• The declared type of a symbol is given after the symbol and a colon. The declared type can often be omitted, because the compiler can infer it from the
context.
• Array types are written Array[T] rather than T[], and array selections are written a(i) rather than a[i].
• Functions can be nested inside other functions. Nested functions can access
parameters and local variables of enclosing functions. For instance, the name
of the array xs is visible in functions swap and sort1, and therefore need not
be passed as a parameter to them.
So far, Scala looks like a fairly conventional language with some syntactic peculiarities. In fact it is possible to write programs in a conventional imperative or objectoriented style. This is important because it is one of the things that makes it easy
to combine Scala components with components written in mainstream languages
such as Java, C# or Visual Basic.
However, it is also possible to write programs in a style which looks completely different. Here is Quicksort again, this time written in functional style.
def sort(xs: Array[Int]): Array[Int] = {
if (xs.length <= 1) xs
else {
val pivot = xs(xs.length / 2)
Array.concat(
sort(xs filter (pivot >)),
xs filter (pivot ==),
sort(xs filter (pivot <)))
}
}

The functional program captures the essence of the quicksort algorithm in a concise
way:
• If the array is empty or consists of a single element, it is already sorted, so
return it immediately.
• If the array is not empty, pick an an element in the middle of it as a pivot.
• Partition the array into two sub-arrays containing elements that are less than,
respectively greater than the pivot element, and a third array which contains
elements equal to pivot.
• Sort the first two sub-arrays by a recursive invocation of the sort function.1
• The result is obtained by appending the three sub-arrays together.
1

This is not quite what the imperative algorithm does; the latter partitions the array into two
sub-arrays containing elements less than or greater or equal to pivot.

